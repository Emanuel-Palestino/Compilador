P DF DA DV TN PR CL SL SW AS OL OC EA M PA L T A V B G I AC EL CS X Y CE CF CA CB E F
function id ( ) { } , let var const [ ] string num parseInt parseFloat console.log while do for ; ++ -- if return continue break else switch case : default = += -= *= /= %= **= <<= >>= >>>= &= ^= |= &&= ||= ??= && || ! == != === !== > >= < <= + - * / boolean
P 
P » P P
P » DF 
P » DA 
P » DV 
P » TN 
P » PR 
P » CL 
P » SL  
P » SW 
P » AS 
P » OL 
P » OC 
P » EA 
P » M  
P » Ɛ
DF » function id ( PA ) { P } 
PA » id L
PA » L  
DV » T id L 
L » , id L
L » Ɛ 
T » let
T » var 
T » const
DA » T id = [ A ]
A » V B
B » , V B  
B » Ɛ
V » string 
V » num 
V » id
V » Ɛ
TN » parseInt ( string , G ) 
TN » parseFloat ( string , G ) 
PR » console.log ( I ) 
I » M  
I » I , M
I » Ɛ
CL » while ( OL ) { P }  
CL » do { P } while ( OL )  
CL » for ( AS ; OL ; AC ) { P } 
AC » ++ id 
AC » -- id
AC » id ++
AC » id --
SL » if ( OL ) { P } EL 
P » return M  
P » continue
P » break 
EL » else if ( OL ) { P } EL
EL » else { P } EL 
EL » Ɛ
SW » switch ( M ) { CS }
CS » case M : P break CS
CS » default : P 
CS » Ɛ
AS » X Y
Y » = X  
Y » += X  
Y » -= X   
Y » *= X 
Y » /= X 
Y » %= X   
Y » **= X  
Y » <<= X 
Y » >>= X 
Y » >>>= X  
Y » &= X 
Y » ^= X  
Y » |= X  
Y » &&= X 
Y » ||= X  
Y » ??= X 
X » DV
X » M 
OL » CE 
OL » CE && CF  
OL » CE || CF 
CE » CF
CE » ! CF
CF » OC 
CF » EA 
CF » M
OC » CA
CA » CA == CB
CA » CA != CB
CA » CA === CB
CA » CA !== CB
CA » CB
CB » CB > M
CB » CB >= M
CB » CB < M
CB » CB <= M
CB » M 
EA » E
E » E + F 
E » E - F    
E » F
F » F * G 
F » F / G
F » G
G » ( E )
G » id 
G » num 
M » string 
M » id 
M » num 
M » boolean