P C DF DA DV AS OL OC EA TN PR CL SL SW M PA L T A V B X Y CE CF CA CB E F G I AC R EL SW CS BR 
function id ( ) { } , = [ ] string num let var const += -= *= /= %= **= <<= >>= >>>= &= ^= |= &&= ||= ??= && || ! == != === !== > >= < <= + - * / parseInt parseFloat console.log boolean for ; ++ -- while do if return continue break else switch case 
P
P » C C 
C » DF
C » DA 
C » DV 
C » AS 
C » OL 
C » OC 
C » EA 
C » TN 
C » PR 
C » CL 
C » SL  
C » SW 
C » M  
C » Ɛ
DF » function id ( PA ) { C } 
PA » id L
PA » L 
DA » T id = [ A ] 
A » V B
B » , V B  
B » Ɛ
V » string 
V » num 
V » id
V » Ɛ
T » let
T » var 
T » const
DV » T id L 
L » , id L  
L » Ɛ
AS » X Y
Y » = X 
Y » += X  
Y » -= X   
Y » *= X 
Y » /= X 
Y » %= X   
Y » **= X  
Y » <<= X 
Y » >>= X 
Y » >>>= X  
Y » &= X 
Y » ^= X  
Y » |= X  
Y » &&= X 
Y » ||= X  
Y » ??= X 
X » DV
X » M 
OL » CE 
OL » CE && CF     
OL » CE || CF  
CE » CF
CE » ! CF
CF » OC 
CF » EA 
CF » M
OC » CA
CA » CA == CB
CA » CA != CB
CA » CA === CB
CA » CA !== CB
CA » CB
CB » CB > M
CB » CB >= M
CB » CB < M
CB » CB <= M
CB » M 
EA » E
E » E + F 
E » E - F    
E » F
F » F * G 
F » F / G
F » G
G » ( E )
G » num 
G » id 
TN » parseInt (string , G ) 
TN » parseFloat (string , G ) 
PR » console.log ( I ) 
I » M 	
I » I , M
M » string 
M » id 
M » num 
M » boolean 
CL » for ( AS ; OL ; AC ) { C } 
AS » Ɛ
OL » Ɛ
AC » ++ id
AC » -- id
AC » id ++
AC » id --
AC » , AC
CL » while ( OL ) { C } 
CL » do { C } while ( OL )  
SL » if ( OL ) { C R } EL 
SL » { C R } EL 
R » return M  
R » continue
R » break 
R » Ɛ 
EL » else if ( OL ) { C R } EL
EL » else { C R } EL 
EL » Ɛ
SW » switch ( M ) { CS }
CS » case M : C break CS
CS » default : C BR
CS » Ɛ
BR » break 
BR » Ɛ