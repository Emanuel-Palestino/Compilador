P C DF DA DV TN PR CL SL SW AS OL OC EA M PA L T DA A B VA G I AC R EL CS X Y CE CF CA CB E F 
function id ( ) { } , let var const [ ] string num parseInt parseFloat console.log while do for ; ++ -- if return continue break else switch case : default = += -= *= /= %= **= <<= >>= >>>= &= ^= |= &&= ||= ??= && || ! == != === !== > >= < <= + - * / boolean
P 
P » C 
C » DF C 
C » DA C
C » DV C
C » TN C
C » PR C
C » CL C
C » SL C 
C » SW C
C » AS C
C » OL C
C » OC C
C » EA C
C » M C
C » Ɛ C
DF » function id ( PA ) { C } 
PA » id L
PA » L  
DV » T id L 
L » , id L
L » Ɛ 
T » let
T » var 
T » const
DA » T id = [ A ]
A » VA B
B » , A  
B » Ɛ
VA » string 
VA » num 
VA » id
VA » Ɛ
TN » parseInt ( string , G ) 
TN » parseFloat ( string , G ) 
PR » console.log ( I ) 
I » M  
I » I , M
I » Ɛ
M » string 
M » id 
M » num 
M » boolean
CL » while ( OL ) { C }  
CL » do { C } while ( OL )  
CL » for ( AS ; OL ; AC ) { C } 
AC » ++ id 
AC » -- id
AC » id ++
AC » id --
SL » if ( OL ) { C R } EL 
SL » { C R } EL 
R » return M  
R » continue
R » break 
R » Ɛ
EL » else SL
EL » Ɛ
SW » switch ( M ) { CS }
CS » case M : C break CS
CS » default : C 
CS » Ɛ
AS » X = Y
AS » X += Y 
AS » X -= Y 
AS » X *= Y
AS » X /= Y
AS » X %= Y  
AS » X **= Y 
AS » X <<= Y
AS » X >>= Y
AS » X >>>= Y 
AS » X &= Y
AS » X ^= Y 
AS » X |= Y 
AS » X &&= Y
AS » X ||= Y 
AS » X ??= Y 
X » DV 
X » M   
Y » AS
Y » M 
OL » CE 
OL » CE && CF  
OL » CE || CF 
CE » CF
CE » ! CF
CF » OC 
CF » EA 
CF » M
OC » CA
CA » CA == CB
CA » CA != CB
CA » CA === CB
CA » CA !== CB
CA » CB
CB » CB > M
CB » CB >= M
CB » CB < M
CB » CB <= M
CB » M 
EA » E
E » E + F 
E » E - F    
E » F
F » F * G 
F » F / G
F » G
G » ( E )
G » id 
G » num 